{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1Q7yf3lu6fldgb1hI73X8lH5bY0tfKWqG",
      "authorship_tag": "ABX9TyO/wJBC7AcO8j8y1Sc6JvKp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zahidhamidi/ML-Project/blob/main/mlproject_regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Ingestion"
      ],
      "metadata": {
        "id": "fS6pAVtvmMDk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fDHecazrKgC7"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import xlrd\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel(r'/content/drive/MyDrive/Master Files/Msc Project/Project Dataset/Well Log Dataset - Hugoton and Panoma Gas Fields (University of Kansas) .xlsx')\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N9d9czb-NFml",
        "outputId": "7190f393-c612-4b9b-e483-f12efd833ac0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Facies Formation Well Name   Depth     GR  ILD_log10  DeltaPHI   PHIND  \\\n",
            "0         2     A1 SH   SHANKLE  2774.5  98.36      0.642      -0.1  18.685   \n",
            "1         2     A1 SH   SHANKLE  2775.0  97.57      0.631       7.9  16.745   \n",
            "2         2     A1 SH   SHANKLE  2775.5  98.41      0.615      12.8  14.105   \n",
            "3         2     A1 SH   SHANKLE  2776.0  85.92      0.597      13.0  13.385   \n",
            "4         2     A1 SH   SHANKLE  2776.5  83.16      0.592      12.3  13.345   \n",
            "..      ...       ...       ...     ...    ...        ...       ...     ...   \n",
            "444       8      C LM   SHANKLE  3006.0  32.84      1.120      -2.2   3.455   \n",
            "445       8      C LM   SHANKLE  3006.5  25.16      1.112      -1.6   2.890   \n",
            "446       8      C LM   SHANKLE  3007.0  25.16      1.112      -1.6   2.890   \n",
            "447       4      C LM   SHANKLE  3007.5  26.22      1.092      -0.4   3.400   \n",
            "448       4      C LM   SHANKLE  3008.0  65.36      1.026       1.6   4.715   \n",
            "\n",
            "      PE  NM_M  RELPOS  GR_label1     ILD_label2 PHIND_label3 Phases  \\\n",
            "0    2.9     1   1.000      Shale     HC-bearing          Oil    NaN   \n",
            "1    3.2     1   0.984      Shale     HC-bearing          Oil    NaN   \n",
            "2    3.2     1   0.968      Shale  Water-bearing          Gas    NaN   \n",
            "3    3.4     1   0.952      Shale  Water-bearing          Gas    NaN   \n",
            "4    3.4     1   0.935      Shale  Water-bearing          Gas    NaN   \n",
            "..   ...   ...     ...        ...            ...          ...    ...   \n",
            "444  5.1     2   0.060      Shale     HC-bearing          Oil    NaN   \n",
            "445  4.8     2   0.045  Sandstone     HC-bearing          Oil    Oil   \n",
            "446  4.8     2   0.030  Sandstone     HC-bearing          Oil    Oil   \n",
            "447  4.5     2   0.030  Sandstone     HC-bearing          Oil    Oil   \n",
            "448  4.5     2   0.015  Sandstone     HC-bearing          Oil    Oil   \n",
            "\n",
            "     Phase code  \n",
            "0             0  \n",
            "1             0  \n",
            "2             0  \n",
            "3             0  \n",
            "4             0  \n",
            "..          ...  \n",
            "444           0  \n",
            "445           2  \n",
            "446           2  \n",
            "447           2  \n",
            "448           2  \n",
            "\n",
            "[449 rows x 16 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)\n"
      ],
      "metadata": {
        "id": "nI8LO-yyQHsA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "outputId": "b72ad4a5-584f-4a9e-d50a-737570eaa1cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Facies Formation Well Name   Depth     GR  ILD_log10  DeltaPHI   PHIND  \\\n",
              "0       2     A1 SH   SHANKLE  2774.5  98.36      0.642      -0.1  18.685   \n",
              "1       2     A1 SH   SHANKLE  2775.0  97.57      0.631       7.9  16.745   \n",
              "2       2     A1 SH   SHANKLE  2775.5  98.41      0.615      12.8  14.105   \n",
              "3       2     A1 SH   SHANKLE  2776.0  85.92      0.597      13.0  13.385   \n",
              "4       2     A1 SH   SHANKLE  2776.5  83.16      0.592      12.3  13.345   \n",
              "\n",
              "    PE  NM_M  RELPOS GR_label1     ILD_label2 PHIND_label3 Phases  Phase code  \n",
              "0  2.9     1   1.000     Shale     HC-bearing          Oil    NaN           0  \n",
              "1  3.2     1   0.984     Shale     HC-bearing          Oil    NaN           0  \n",
              "2  3.2     1   0.968     Shale  Water-bearing          Gas    NaN           0  \n",
              "3  3.4     1   0.952     Shale  Water-bearing          Gas    NaN           0  \n",
              "4  3.4     1   0.935     Shale  Water-bearing          Gas    NaN           0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-603b734f-1b10-424b-acd6-2da4c71ba5e3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Facies</th>\n",
              "      <th>Formation</th>\n",
              "      <th>Well Name</th>\n",
              "      <th>Depth</th>\n",
              "      <th>GR</th>\n",
              "      <th>ILD_log10</th>\n",
              "      <th>DeltaPHI</th>\n",
              "      <th>PHIND</th>\n",
              "      <th>PE</th>\n",
              "      <th>NM_M</th>\n",
              "      <th>RELPOS</th>\n",
              "      <th>GR_label1</th>\n",
              "      <th>ILD_label2</th>\n",
              "      <th>PHIND_label3</th>\n",
              "      <th>Phases</th>\n",
              "      <th>Phase code</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>A1 SH</td>\n",
              "      <td>SHANKLE</td>\n",
              "      <td>2774.5</td>\n",
              "      <td>98.36</td>\n",
              "      <td>0.642</td>\n",
              "      <td>-0.1</td>\n",
              "      <td>18.685</td>\n",
              "      <td>2.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000</td>\n",
              "      <td>Shale</td>\n",
              "      <td>HC-bearing</td>\n",
              "      <td>Oil</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>A1 SH</td>\n",
              "      <td>SHANKLE</td>\n",
              "      <td>2775.0</td>\n",
              "      <td>97.57</td>\n",
              "      <td>0.631</td>\n",
              "      <td>7.9</td>\n",
              "      <td>16.745</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.984</td>\n",
              "      <td>Shale</td>\n",
              "      <td>HC-bearing</td>\n",
              "      <td>Oil</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>A1 SH</td>\n",
              "      <td>SHANKLE</td>\n",
              "      <td>2775.5</td>\n",
              "      <td>98.41</td>\n",
              "      <td>0.615</td>\n",
              "      <td>12.8</td>\n",
              "      <td>14.105</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.968</td>\n",
              "      <td>Shale</td>\n",
              "      <td>Water-bearing</td>\n",
              "      <td>Gas</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>A1 SH</td>\n",
              "      <td>SHANKLE</td>\n",
              "      <td>2776.0</td>\n",
              "      <td>85.92</td>\n",
              "      <td>0.597</td>\n",
              "      <td>13.0</td>\n",
              "      <td>13.385</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0.952</td>\n",
              "      <td>Shale</td>\n",
              "      <td>Water-bearing</td>\n",
              "      <td>Gas</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>A1 SH</td>\n",
              "      <td>SHANKLE</td>\n",
              "      <td>2776.5</td>\n",
              "      <td>83.16</td>\n",
              "      <td>0.592</td>\n",
              "      <td>12.3</td>\n",
              "      <td>13.345</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0.935</td>\n",
              "      <td>Shale</td>\n",
              "      <td>Water-bearing</td>\n",
              "      <td>Gas</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-603b734f-1b10-424b-acd6-2da4c71ba5e3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-603b734f-1b10-424b-acd6-2da4c71ba5e3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-603b734f-1b10-424b-acd6-2da4c71ba5e3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# labelling each columns\n",
        "\n",
        "depth = df.iloc[:,3]\n",
        "gamma = df.iloc[:,4]\n",
        "res = df.iloc[:,5]\n",
        "nd = df.iloc[:,7]\n",
        "phase = df.iloc[:,15]"
      ],
      "metadata": {
        "id": "4DtNShdMa6Jm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Data Pre-processing and check\n",
        "\n",
        "depth.describe()\n"
      ],
      "metadata": {
        "id": "XngDbCADbvbf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f12e88c4-825f-4a38-817f-c61aac1e3d90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     449.000000\n",
              "mean     2890.502227\n",
              "std        68.320926\n",
              "min      2774.500000\n",
              "25%      2831.000000\n",
              "50%      2889.000000\n",
              "75%      2951.000000\n",
              "max      3008.000000\n",
              "Name: Depth, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gamma.describe()"
      ],
      "metadata": {
        "id": "Mud91c60dSKl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "afe5c5bf-8c23-4a65-9e70-e77a833ebb1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    449.000000\n",
              "mean      65.431180\n",
              "std       25.696418\n",
              "min       18.400000\n",
              "25%       54.960000\n",
              "50%       66.600000\n",
              "75%       75.150000\n",
              "max      242.750000\n",
              "Name: GR, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "res.describe()"
      ],
      "metadata": {
        "id": "X9eMR6tIdUSH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20800cd6-612e-4bae-afee-1dcbe64c3669"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    449.000000\n",
              "mean       0.630831\n",
              "std        0.241293\n",
              "min        0.093000\n",
              "25%        0.425000\n",
              "50%        0.620000\n",
              "75%        0.817000\n",
              "max        1.311000\n",
              "Name: ILD_log10, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nd.describe()"
      ],
      "metadata": {
        "id": "inCuQVerdXpP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba36b93b-bfbc-4f89-9fc9-ae656f3e3610"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    449.000000\n",
              "mean      15.741125\n",
              "std        9.080467\n",
              "min        2.890000\n",
              "25%        9.150000\n",
              "50%       13.935000\n",
              "75%       18.575000\n",
              "max       55.915000\n",
              "Name: PHIND, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phase.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mwUI9CTB8rrW",
        "outputId": "179ed26b-c2c0-4b3f-f1f3-abfabe742c3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    449.000000\n",
              "mean       1.291759\n",
              "std        1.351900\n",
              "min        0.000000\n",
              "25%        0.000000\n",
              "50%        1.000000\n",
              "75%        3.000000\n",
              "max        3.000000\n",
              "Name: Phase code, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Preprocessing Phase - Data Cleaning"
      ],
      "metadata": {
        "id": "svOFN1admWN5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for NULL values\n",
        "\n",
        "depth.isnull().sum()"
      ],
      "metadata": {
        "id": "RC-lx4nscRGW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "819464ba-605b-47a4-fac8-c8472d8cb23b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gamma.isnull().sum()"
      ],
      "metadata": {
        "id": "J-H2rTKLdn0y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "438f69dd-1059-4f31-c1d1-71d41fbdf585"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "res.isnull().sum()"
      ],
      "metadata": {
        "id": "zA_kTSFCdqjT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e6b4e96d-e637-438d-d7e7-7d8d9e6aefc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nd.isnull().sum()"
      ],
      "metadata": {
        "id": "Pb_HH8sedt3R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bacb203a-20a8-46eb-d2f7-6b650ebcc2f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check data distribution (Check outliers)"
      ],
      "metadata": {
        "id": "sAYcuuiWBLeW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=df['GR'],y=df['Well Name'])"
      ],
      "metadata": {
        "id": "luP_9msMe30U",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "8ede3ccc-8792-4ca4-df94-c27e88dbb6df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcfa7b9a410>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaQAAAEGCAYAAAAqmOHQAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAASR0lEQVR4nO3dfZBddX3H8c8nCWIoWiBhMjZQLrgMFFuNkFqKypOhJEEFWttKHbIyMilMCAF00EpmoJ10xjqgYhQtHW2SGZ9o6xOdECWIT9UqGxpJIAHumM1ASnhYylMIgd18+8c9CzfL7r1nl3vO/W3O+zVzZ/eee37n972/czafnId7riNCAAB025RuFwAAgEQgAQASQSABAJJAIAEAkkAgAQCSMK3bBUwmM2fOjFqt1u0yAGDS2LBhwxMRcXieeQmkcajVaurr6+t2GQAwadjenndeDtkBAJJAIAEAkkAgAQCSQCABAJJAIAEAkkAgAQCSQCABAJJAIAEAkkAgAQCSQCABAJJAIAEAkkAgAQCSQCABAJJAIAEAkkAgAQCSQCABAJJAIAEAkkAgAQCSQCABAJIwrdsFYHJYuXKl6vX6hNvv2LFDkjR79uzcbXp6erR06dIJ9wlgciGQkEu9XtfGzVs0dNBhE2o/9fmnJUk79+Tb5KY+/+SE+gEweRFIyG3ooMO0+/iFE2o7fetaScrdfnh+ANXBOSQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEgikRKxcuVIrV67sdhlogXUEFGtatwtAQ71e73YJaIN1BBSLPSQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEggkAEASCCQAQBIIJABAEnIHku2DiiwEAFBtbQPJ9im275O0NXv+Nts3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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=df['ILD_log10'],y=df['Well Name'])"
      ],
      "metadata": {
        "id": "uW7qE4vGeTcU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "04ff142b-19e3-46c5-e60a-cae2a611edc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcfa7ae4410>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=df['PHIND'],y=df['Well Name'])"
      ],
      "metadata": {
        "id": "A_reLQdkeiU5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "1551fd9d-d3d0-4a3b-c581-bf1cdbe01fce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcfa7621d10>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=df['Facies'],y=df['Well Name'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "oIGUQJOXl-wF",
        "outputId": "692afcd7-0705-4934-b660-2d7ae470f599"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcfa93eb110>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Preprocessing Phase - Data Partitioning"
      ],
      "metadata": {
        "id": "-WGhBr-xmgZg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate features and labels\n",
        "\n",
        "features = ['Depth','GR','ILD_log10','PHIND']\n",
        "label = 'Phase code'\n",
        "\n",
        "X, y = df[features].values, df[label].values\n",
        "\n",
        "for n in range(0,4):\n",
        "    print(\"Log data:\", str(n+1), \"\\n  Features:\",list(X[n]), \"\\n  Label:\", y[n])\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "haGA8A02hDDQ",
        "outputId": "1cc92a1e-1b39-4959-be14-5b7139bbcbdf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Log data: 1 \n",
            "  Features: [2774.5, 98.36, 0.642, 18.685] \n",
            "  Label: 0\n",
            "Log data: 2 \n",
            "  Features: [2775.0, 97.57, 0.631, 16.745] \n",
            "  Label: 0\n",
            "Log data: 3 \n",
            "  Features: [2775.5, 98.41, 0.615, 14.105] \n",
            "  Label: 0\n",
            "Log data: 4 \n",
            "  Features: [2776.0, 85.92, 0.597, 13.385] \n",
            "  Label: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "features = ['Depth','GR','ILD_log10','PHIND']\n",
        "for col in features:\n",
        "    df.boxplot(column=col, by='Phase code', figsize=(6,6))\n",
        "    plt.title(col)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4KdrfTOQVoR_",
        "outputId": "11afe609-1d5b-4888-fe0f-d726b3b22f95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n",
            "/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n",
            "/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n",
            "/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split data into Training and Testing Set (70-30) ratio"
      ],
      "metadata": {
        "id": "CAtfshZHaNog"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data 70%-30% into training set and test set\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0, stratify=y)\n",
        "\n",
        "print ('Training cases: %d\\nTest cases: %d' % (X_train.shape[0], X_test.shape[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JtK3HcnoWBzz",
        "outputId": "8778334d-4003-41d7-9422-97b97eddcacc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training cases: 314\n",
            "Test cases: 135\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Setting hyperparameter for Regression Model\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "64u4kTSOafGe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Set regularization rate\n",
        "reg = 0.1\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EMbtRsZDWLG_",
        "outputId": "300f06c2-d8da-46a8-c2b8-a589a08823b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LogisticRegression(C=10.0, max_iter=10000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Training regression model"
      ],
      "metadata": {
        "id": "r1Ap6g4qbIGn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# train a logistic regression model on the training set\n",
        "\n",
        "multi_model = LogisticRegression(C=1/reg, solver='lbfgs', multi_class='auto', max_iter=10000).fit(X_train, y_train)\n",
        "print (multi_model)"
      ],
      "metadata": {
        "id": "WVPt36XWbI8D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "phase_predictions = multi_model.predict(X_test)\n",
        "print('Predicted labels: ', phase_predictions[:15])\n",
        "print('Actual labels   : ' ,y_test[:15])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Imf4W3GrXjrn",
        "outputId": "d6488821-e446-4981-ce96-f4ebdc6e96d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted labels:  [0 0 0 3 0 3 0 0 0 0 0 3 0 3 2]\n",
            "Actual labels   :  [0 0 0 3 0 3 0 0 0 0 0 3 0 3 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Regression Classification Report"
      ],
      "metadata": {
        "id": "qC-sxhiTbtEy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn. metrics import classification_report\n",
        "\n",
        "print(classification_report(y_test, phase_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkGNau-OYW54",
        "outputId": "71987311-b79b-41cd-db91-cd9458d44626"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.96      0.96        67\n",
            "           1       0.00      0.00      0.00         3\n",
            "           2       0.67      0.78      0.72        23\n",
            "           3       0.86      0.86      0.86        42\n",
            "\n",
            "    accuracy                           0.87       135\n",
            "   macro avg       0.62      0.65      0.63       135\n",
            "weighted avg       0.86      0.87      0.87       135\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "\n",
        "print(\"Overall Accuracy:\",accuracy_score(y_test, phase_predictions))\n",
        "print(\"Overall Precision:\",precision_score(y_test, phase_predictions, average='macro'))\n",
        "print(\"Overall Recall:\",recall_score(y_test, phase_predictions, average='macro'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KBbJb6m3Yhba",
        "outputId": "0d9eeb4a-9828-4c05-dca3-eab77acdb662"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overall Accuracy: 0.8740740740740741\n",
            "Overall Precision: 0.6233766233766234\n",
            "Overall Recall: 0.6487438583480115\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Regression Confusion Matrix"
      ],
      "metadata": {
        "id": "Xmyj7K1Pb02b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Print the confusion matrix\n",
        "mcm = confusion_matrix(y_test, phase_predictions)\n",
        "print(mcm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oNVwEzxzYshd",
        "outputId": "8a4e5fcb-51cd-42bb-a447-f38644c4c2c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[64  0  1  2]\n",
            " [ 1  0  2  0]\n",
            " [ 1  0 18  4]\n",
            " [ 0  0  6 36]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "\n",
        "phases_classes = ['Gas','Oil','Water','N/A']\n",
        "\n",
        "\n",
        "plt.imshow(mcm, interpolation=\"nearest\", cmap=plt.cm.Blues)\n",
        "plt.colorbar()\n",
        "tick_marks = np.arange(len(phases_classes))\n",
        "plt.xticks(tick_marks, phases_classes, rotation=45)\n",
        "plt.yticks(tick_marks, phases_classes)\n",
        "plt.xlabel(\"Predicted Phases\")\n",
        "plt.ylabel(\"Actual Phases\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "DM06echCYxvA",
        "outputId": "90b4b456-30e7-4dba-f725-874176c90fa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ROC Curve and AUC"
      ],
      "metadata": {
        "id": "Ai2Hrcgqb6Yo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "# Get class probability scores\n",
        "phases_prob = multi_model.predict_proba(X_test)\n",
        "\n",
        "# Get ROC metrics for each class\n",
        "fpr = {}\n",
        "tpr = {}\n",
        "thresh ={}\n",
        "for i in range(len(phases_classes)):    \n",
        "    fpr[i], tpr[i], thresh[i] = roc_curve(y_test, phases_prob[:,i], pos_label=i)\n",
        "    \n",
        "# Plot the ROC chart\n",
        "plt.plot(fpr[0], tpr[0], linestyle='--',color='orange', label=phases_classes[0] + ' vs Rest')\n",
        "plt.plot(fpr[1], tpr[1], linestyle='--',color='green', label=phases_classes[1] + ' vs Rest')\n",
        "plt.plot(fpr[2], tpr[2], linestyle='--',color='blue', label=phases_classes[2] + ' vs Rest')\n",
        "plt.plot(fpr[3], tpr[3], linestyle='--',color='yellow', label=phases_classes[3] + ' vs Rest')\n",
        "plt.title('Multiclass ROC curve')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive rate')\n",
        "plt.legend(loc='best')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "ZGDnhz3LaLXf",
        "outputId": "2342a3cd-6358-4afa-eda9-7a0e477ef73b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "auc = roc_auc_score(y_test,phases_prob, multi_class='ovr')\n",
        "print('Average AUC:', auc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rXmhaXxpavY5",
        "outputId": "015fe838-1979-42ae-e7ab-28be14d260dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average AUC: 0.9655082461744253\n"
          ]
        }
      ]
    }
  ]
}